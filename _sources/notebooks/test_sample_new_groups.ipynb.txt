{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**NOTE** This notebook is not part of the documentation. It's not meant to be in the webpage. It's something I wrote when I was testing the new functionality and I think it's nice to have it handy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import arviz as az\n",
    "import bambi as bmb\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = bmb.load_data(\"sleepstudy\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Reaction</th>\n",
       "      <th>Days</th>\n",
       "      <th>Subject</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>249.5600</td>\n",
       "      <td>0</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>258.7047</td>\n",
       "      <td>1</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>250.8006</td>\n",
       "      <td>2</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>321.4398</td>\n",
       "      <td>3</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>356.8519</td>\n",
       "      <td>4</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Reaction  Days  Subject\n",
       "0  249.5600     0      308\n",
       "1  258.7047     1      308\n",
       "2  250.8006     2      308\n",
       "3  321.4398     3      308\n",
       "4  356.8519     4      308"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "       Formula: Reaction ~ 1 + Days + (1 + Days | Subject)\n",
       "        Family: gaussian\n",
       "          Link: mu = identity\n",
       "  Observations: 180\n",
       "        Priors: \n",
       "    target = mu\n",
       "        Common-level effects\n",
       "            Intercept ~ Normal(mu: 298.5079, sigma: 261.0092)\n",
       "            Days ~ Normal(mu: 0.0, sigma: 48.8915)\n",
       "        \n",
       "        Group-level effects\n",
       "            1|Subject ~ Normal(mu: 0.0, sigma: HalfNormal(sigma: 261.0092))\n",
       "            Days|Subject ~ Normal(mu: 0.0, sigma: HalfNormal(sigma: 48.8915))\n",
       "        \n",
       "        Auxiliary parameters\n",
       "            sigma ~ HalfStudentT(nu: 4.0, sigma: 56.1721)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = bmb.Model(\"Reaction ~ 1 + Days + (1 + Days | Subject)\", data)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Multiprocess sampling (2 chains in 2 jobs)\n",
      "NUTS: [Reaction_sigma, Intercept, Days, 1|Subject_sigma, 1|Subject_offset, Days|Subject_sigma, Days|Subject_offset]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      100.00% [4000/4000 00:15&lt;00:00 Sampling 2 chains, 0 divergences]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 15 seconds.\n",
      "We recommend running at least 4 chains for robust computation of convergence diagnostics\n"
     ]
    }
   ],
   "source": [
    "idata = model.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Reaction</th>\n",
       "      <th>Days</th>\n",
       "      <th>Subject</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>249.5600</td>\n",
       "      <td>0</td>\n",
       "      <td>xxx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>258.7047</td>\n",
       "      <td>1</td>\n",
       "      <td>xxx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>250.8006</td>\n",
       "      <td>2</td>\n",
       "      <td>xxx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>321.4398</td>\n",
       "      <td>3</td>\n",
       "      <td>xxx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>356.8519</td>\n",
       "      <td>4</td>\n",
       "      <td>xxx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>414.6901</td>\n",
       "      <td>5</td>\n",
       "      <td>xxx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>382.2038</td>\n",
       "      <td>6</td>\n",
       "      <td>xxx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>290.1486</td>\n",
       "      <td>7</td>\n",
       "      <td>xxx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>430.5853</td>\n",
       "      <td>8</td>\n",
       "      <td>xxx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>466.3535</td>\n",
       "      <td>9</td>\n",
       "      <td>xxx</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>249.5600</td>\n",
       "      <td>0</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>258.7047</td>\n",
       "      <td>1</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>250.8006</td>\n",
       "      <td>2</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>321.4398</td>\n",
       "      <td>3</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>356.8519</td>\n",
       "      <td>4</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>414.6901</td>\n",
       "      <td>5</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>382.2038</td>\n",
       "      <td>6</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>290.1486</td>\n",
       "      <td>7</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>430.5853</td>\n",
       "      <td>8</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>466.3535</td>\n",
       "      <td>9</td>\n",
       "      <td>308</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Reaction  Days Subject\n",
       "0   249.5600     0     xxx\n",
       "1   258.7047     1     xxx\n",
       "2   250.8006     2     xxx\n",
       "3   321.4398     3     xxx\n",
       "4   356.8519     4     xxx\n",
       "5   414.6901     5     xxx\n",
       "6   382.2038     6     xxx\n",
       "7   290.1486     7     xxx\n",
       "8   430.5853     8     xxx\n",
       "9   466.3535     9     xxx\n",
       "10  249.5600     0     308\n",
       "11  258.7047     1     308\n",
       "12  250.8006     2     308\n",
       "13  321.4398     3     308\n",
       "14  356.8519     4     308\n",
       "15  414.6901     5     308\n",
       "16  382.2038     6     308\n",
       "17  290.1486     7     308\n",
       "18  430.5853     8     308\n",
       "19  466.3535     9     308"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new = data.head(10).reset_index(drop=True)\n",
    "df_new[\"Subject\"] = \"xxx\"\n",
    "df_new = pd.concat([df_new, data.head(10)])\n",
    "df_new = df_new.reset_index(drop=True)\n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "p = model.predict(idata, data=df_new, inplace=False, sample_new_groups=True)\n",
    "\n",
    "reaction_draws = p.posterior[\"Reaction_mean\"]\n",
    "mean = reaction_draws.mean((\"chain\", \"draw\")).to_numpy()\n",
    "bounds = reaction_draws.quantile((0.025, 0.975), (\"chain\", \"draw\")).to_numpy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 2, figsize=(10, 4), sharey=True)\n",
    "\n",
    "axes[0].scatter(df_new.iloc[10:][\"Days\"], df_new.iloc[10:][\"Reaction\"])\n",
    "axes[1].scatter(df_new.iloc[:10][\"Days\"], df_new.iloc[:10][\"Reaction\"])\n",
    "\n",
    "axes[0].fill_between(np.arange(10), bounds[0, 10:], bounds[1, 10:], alpha=0.5, color=\"C0\")\n",
    "axes[1].fill_between(np.arange(10), bounds[0, :10], bounds[1, :10], alpha=0.5, color=\"C0\")\n",
    "\n",
    "axes[0].set_title(\"Original participant\")\n",
    "axes[1].set_title(\"New participant\");"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>subj</th>\n",
       "      <th>item</th>\n",
       "      <th>site</th>\n",
       "      <th>Y</th>\n",
       "      <th>continuous</th>\n",
       "      <th>dummy</th>\n",
       "      <th>threecats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.276766</td>\n",
       "      <td>0.929616</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.058104</td>\n",
       "      <td>0.008388</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-6.847861</td>\n",
       "      <td>0.439645</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>12.474619</td>\n",
       "      <td>0.596366</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.426047</td>\n",
       "      <td>0.709510</td>\n",
       "      <td>0</td>\n",
       "      <td>a</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0 subj  item  site          Y  continuous  dummy threecats\n",
       "0           0    0     0     0   0.276766    0.929616      0         a\n",
       "1           1    1     0     0  -0.058104    0.008388      0         a\n",
       "2           2    2     0     1  -6.847861    0.439645      0         a\n",
       "3           3    3     0     1  12.474619    0.596366      0         a\n",
       "4           4    4     0     2  -0.426047    0.709510      0         a"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"../../tests/data/crossed_random.csv\")\n",
    "data[\"subj\"] = data[\"subj\"].astype(str)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "       Formula: Y ~ 0 + threecats + (0 + threecats | subj)\n",
       "        Family: gaussian\n",
       "          Link: mu = identity\n",
       "  Observations: 120\n",
       "        Priors: \n",
       "    target = mu\n",
       "        Common-level effects\n",
       "            threecats ~ Normal(mu: [0. 0. 0.], sigma: [31.1617 31.1617 31.1617])\n",
       "        \n",
       "        Group-level effects\n",
       "            threecats|subj ~ Normal(mu: 0.0, sigma: HalfNormal(sigma: [31.1617 31.1617 31.1617]))\n",
       "        \n",
       "        Auxiliary parameters\n",
       "            sigma ~ HalfStudentT(nu: 4.0, sigma: 5.8759)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "formula = \"Y ~ 0 + threecats + (0 + threecats | subj)\"\n",
    "model = bmb.Model(formula, data)\n",
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Multiprocess sampling (2 chains in 2 jobs)\n",
      "NUTS: [Y_sigma, threecats, threecats|subj_sigma, threecats|subj_offset]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      <progress value='4000' class='' max='4000' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      100.00% [4000/4000 00:08&lt;00:00 Sampling 2 chains, 0 divergences]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Sampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 8 seconds.\n",
      "We recommend running at least 4 chains for robust computation of convergence diagnostics\n"
     ]
    }
   ],
   "source": [
    "idata = model.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>threecats</th>\n",
       "      <th>subj</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>a</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>a</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  threecats subj\n",
       "0         a    0\n",
       "1         a   11"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data = pd.DataFrame(\n",
    "    {\n",
    "        \"threecats\": [\"a\", \"a\"],\n",
    "        \"subj\": [\"0\", \"11\"]\n",
    "    }\n",
    ")\n",
    "new_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "p1 = model.predict(idata, data=new_data, inplace=False, sample_new_groups=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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3d/9XcaOHZvRo0fn+eefz0033ZSNGzfm3/7t35Ik7e3tvaIqSeVxe3v7AV9r6dKlue222w52qAAAh8VBh9XChQvz4osv5re//W2v9ddee23l35MmTcqoUaNy4YUXZvPmzfn4xz9+UK+1ePHitLa2Vh53dXWlubn54AYOANBPDuqjwEWLFmXlypX5zW9+k5NPPvkD9506dWqSZNOmTUmSpqamdHR09Nrnvcfvd11WbW1t6urqei0AAANNn8Kqp6cnixYtysMPP5wnnngi48aN+9DnPPfcc0mSUaNGJUlaWlrywgsvZPv27ZV9Vq9enbq6ukycOLEvwwEAGFD69FHgwoULs2LFivzyl7/MsGHDKtdE1dfX59hjj83mzZuzYsWKXHTRRTnxxBPz/PPP54Ybbsj555+fyZMnJ0mmT5+eiRMn5sorr8ydd96Z9vb23HLLLVm4cGFqa2vLnyEAwGHSpxmr+++/P52dnbngggsyatSoyvLzn/88SVJTU5Nf//rXmT59esaPH58bb7wxc+bMyaOPPlo5xpAhQ7Jy5coMGTIkLS0t+cpXvpKrrrqq132vAACORH2aserp6fnA7c3NzVm7du2HHmfs2LH593//9768NADAgOe3AgEAChFWAACFCCsAgEKEFQBAIQd953Xg6HHKzY8d0vNfv2N2oZEADGxmrAAAChFWAACFCCsAgEKEFQBAIcIKAKAQYQUAUIiwAgAoRFgBABQirAAAChFWAACFCCsAgEKEFQBAIX6EGfrRof54MQBHFjNWAACFCCsAgEKEFQBAIcIKAKAQYQUAUIiwAgAoRFgBABQirAAAChFWAACFCCsAgEKEFQBAIcIKAKAQYQUAUIiwAgAoRFgBABQirAAAChFWAACFCCsAgEKGVnsAMJCdcvNj1R4CAEcQM1YAAIUIKwCAQoQVAEAhfQqrpUuX5uyzz86wYcMycuTIXHLJJdm4cWOvfd59990sXLgwJ554Yk444YTMmTMnHR0dvfbZsmVLZs+eneOOOy4jR47M17/+9ezdu/fQzwYAoIr6FFZr167NwoUL8/TTT2f16tXZs2dPpk+fnl27dlX2ueGGG/Loo4/moYceytq1a7N169Zceumlle379u3L7Nmzs3v37jz11FP5yU9+kuXLl2fJkiXlzgoAoAoG9fT09Bzsk998882MHDkya9euzfnnn5/Ozs6MGDEiK1asyGWXXZYkeeWVVzJhwoS0tbXl3HPPza9+9at88YtfzNatW9PY2JgkWbZsWW666aa8+eabqamp+dDX7erqSn19fTo7O1NXV3eww4cP5VuBZbx+x+xqDwHgkPy17XFI11h1dnYmSRoaGpIkGzZsyJ49ezJt2rTKPuPHj8+YMWPS1taWJGlra8ukSZMqUZUkM2bMSFdXV1566aUDvk53d3e6urp6LQAAA81Bh9X+/ftz/fXX57Of/WxOP/30JEl7e3tqamoyfPjwXvs2Njamvb29ss9/jar3tr+37UCWLl2a+vr6ytLc3HywwwYA6DcHHVYLFy7Miy++mAcffLDkeA5o8eLF6ezsrCxvvPFGv78mAEBfHdSd1xctWpSVK1dm3bp1Ofnkkyvrm5qasnv37uzYsaPXrFVHR0eampoq+/zud7/rdbz3vjX43j7/XW1tbWpraw9mqAAAh02fZqx6enqyaNGiPPzww3niiScybty4XtunTJmSY445JmvWrKms27hxY7Zs2ZKWlpYkSUtLS1544YVs3769ss/q1atTV1eXiRMnHsq5AABUVZ9mrBYuXJgVK1bkl7/8ZYYNG1a5Jqq+vj7HHnts6uvrM3/+/LS2tqahoSF1dXW57rrr0tLSknPPPTdJMn369EycODFXXnll7rzzzrS3t+eWW27JwoULzUoBAEe0PoXV/fffnyS54IILeq3/8Y9/nKuvvjpJctddd2Xw4MGZM2dOuru7M2PGjNx3332VfYcMGZKVK1dmwYIFaWlpyfHHH5958+bl9ttvP7QzAQCoskO6j1W1uI8Vh4v7WJXhPlbAke6w3McKAID/T1gBABQirAAAChFWAACFHNQNQgH6osSXAFwADxwJzFgBABQirAAAChFWAACFCCsAgEKEFQBAIcIKAKAQYQUAUIiwAgAoRFgBABQirAAAChFWAACFCCsAgEKEFQBAIcIKAKAQYQUAUIiwAgAoRFgBABQirAAAChFWAACFCCsAgEKEFQBAIcIKAKAQYQUAUIiwAgAoRFgBABQirAAAChFWAACFCCsAgEKEFQBAIcIKAKAQYQUAUIiwAgAoRFgBABQirAAAChFWAACFCCsAgEL6HFbr1q3LxRdfnNGjR2fQoEF55JFHem2/+uqrM2jQoF7LzJkze+3z9ttvZ+7cuamrq8vw4cMzf/787Ny585BOBACg2vocVrt27coZZ5yRe++99333mTlzZrZt21ZZfvazn/XaPnfu3Lz00ktZvXp1Vq5cmXXr1uXaa6/t++gBAAaQoX19wqxZszJr1qwP3Ke2tjZNTU0H3PaHP/whq1atyjPPPJOzzjorSXLPPffkoosuyg9+8IOMHj26r0MCABgQ+uUaqyeffDIjR47MaaedlgULFuStt96qbGtra8vw4cMrUZUk06ZNy+DBg7N+/foDHq+7uztdXV29FgCAgaZ4WM2cOTM//elPs2bNmnzve9/L2rVrM2vWrOzbty9J0t7enpEjR/Z6ztChQ9PQ0JD29vYDHnPp0qWpr6+vLM3NzaWHDQBwyPr8UeCHueKKKyr/njRpUiZPnpyPf/zjefLJJ3PhhRce1DEXL16c1tbWyuOuri5xBQAMOP1+u4VTTz01J510UjZt2pQkaWpqyvbt23vts3fv3rz99tvve11WbW1t6urqei0AAANNv4fVH//4x7z11lsZNWpUkqSlpSU7duzIhg0bKvs88cQT2b9/f6ZOndrfwwEA6Dd9/ihw586dldmnJHnttdfy3HPPpaGhIQ0NDbntttsyZ86cNDU1ZfPmzfnGN76RT3ziE5kxY0aSZMKECZk5c2auueaaLFu2LHv27MmiRYtyxRVX+EYgAHBE6/OM1bPPPpszzzwzZ555ZpKktbU1Z555ZpYsWZIhQ4bk+eefz9/+7d/mU5/6VObPn58pU6bkP//zP1NbW1s5xgMPPJDx48fnwgsvzEUXXZTzzjsv//zP/1zurAAAqqDPM1YXXHBBenp63nf7448//qHHaGhoyIoVK/r60gAAA5rfCgQAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhfT5R5jhSHHKzY9VewgAHGXMWAEAFCKsAAAK8VEgcEQ41I92X79jdqGRALw/M1YAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAK6XNYrVu3LhdffHFGjx6dQYMG5ZFHHum1vaenJ0uWLMmoUaNy7LHHZtq0aXn11Vd77fP2229n7ty5qaury/DhwzN//vzs3LnzkE4EAKDa+hxWu3btyhlnnJF77733gNvvvPPO/OhHP8qyZcuyfv36HH/88ZkxY0befffdyj5z587NSy+9lNWrV2flypVZt25drr322oM/CwCAAWBoX58wa9aszJo164Dbenp6cvfdd+eWW27Jl770pSTJT3/60zQ2NuaRRx7JFVdckT/84Q9ZtWpVnnnmmZx11llJknvuuScXXXRRfvCDH2T06NGHcDoAANVT9Bqr1157Le3t7Zk2bVplXX19faZOnZq2trYkSVtbW4YPH16JqiSZNm1aBg8enPXr1x/wuN3d3enq6uq1AAAMNEXDqr29PUnS2NjYa31jY2NlW3t7e0aOHNlr+9ChQ9PQ0FDZ579bunRp6uvrK0tzc3PJYQMAFHFEfCtw8eLF6ezsrCxvvPFGtYcEAPAXioZVU1NTkqSjo6PX+o6Ojsq2pqambN++vdf2vXv35u23367s89/V1tamrq6u1wIAMNAUDatx48alqakpa9asqazr6urK+vXr09LSkiRpaWnJjh07smHDhso+TzzxRPbv35+pU6eWHA4AwGHV528F7ty5M5s2bao8fu211/Lcc8+loaEhY8aMyfXXX5/vfOc7+eQnP5lx48blW9/6VkaPHp1LLrkkSTJhwoTMnDkz11xzTZYtW5Y9e/Zk0aJFueKKK3wjEAA4ovU5rJ599tl8/vOfrzxubW1NksybNy/Lly/PN77xjezatSvXXnttduzYkfPOOy+rVq3Kxz72scpzHnjggSxatCgXXnhhBg8enDlz5uRHP/pRgdMBAKieQT09PT3VHkRfdXV1pb6+Pp2dna634n2dcvNj1R4CA8jrd8yu9hCAI9hf2x5HxLcCAQCOBMIKAKAQYQUAUIiwAgAoRFgBABQirAAACunzfazgcHG7BACONGasAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoZWewAAh8MpNz92yMd4/Y7ZBUYCfJSZsQIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHFb7fw7W9/O7fddluvdaeddlpeeeWVJMm7776bG2+8MQ8++GC6u7szY8aM3HfffWlsbCw9FKqoxFfbAeBI0y8zVp/+9Kezbdu2yvLb3/62su2GG27Io48+moceeihr167N1q1bc+mll/bHMAAADqt+uUHo0KFD09TU9BfrOzs78y//8i9ZsWJFvvCFLyRJfvzjH2fChAl5+umnc+655/bHcAAADot+mbF69dVXM3r06Jx66qmZO3dutmzZkiTZsGFD9uzZk2nTplX2HT9+fMaMGZO2trb3PV53d3e6urp6LQAAA03xsJo6dWqWL1+eVatW5f77789rr72Wz33uc3nnnXfS3t6empqaDB8+vNdzGhsb097e/r7HXLp0aerr6ytLc3Nz6WEDAByy4h8Fzpo1q/LvyZMnZ+rUqRk7dmx+8Ytf5Nhjjz2oYy5evDitra2Vx11dXeIKABhw+v12C8OHD8+nPvWpbNq0KU1NTdm9e3d27NjRa5+Ojo4DXpP1ntra2tTV1fVaAAAGmn4Pq507d2bz5s0ZNWpUpkyZkmOOOSZr1qypbN+4cWO2bNmSlpaW/h4KAEC/Kv5R4Ne+9rVcfPHFGTt2bLZu3Zpbb701Q4YMyZe//OXU19dn/vz5aW1tTUNDQ+rq6nLdddelpaXFNwIBgCNe8bD64x//mC9/+ct56623MmLEiJx33nl5+umnM2LEiCTJXXfdlcGDB2fOnDm9bhAKAHCkG9TT09NT7UH0VVdXV+rr69PZ2el6qwHKndf5KHr9jtnVHgJQJX9te/itQACAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoJCh1R4AA9MpNz9W7SEAwBHHjBUAQCFmrAD+Soc6k/v6HbMLjQQYqMxYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCG+FfgR5B5UAFAdwgrgMCnxP3rcsgEGNh8FAgAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAArxkzYDkN/6A97Pof7fBz+JA/2ramF177335vvf/37a29tzxhln5J577sk555xTreEUI4oA4OhVlY8Cf/7zn6e1tTW33nprfv/73+eMM87IjBkzsn379moMBwCgiEE9PT09h/tFp06dmrPPPjv/9E//lCTZv39/mpubc9111+Xmm2/+0Od3dXWlvr4+nZ2dqaur6+/h9okZK+CjzseJHI3+2vY47B8F7t69Oxs2bMjixYsr6wYPHpxp06alra3tgM/p7u5Od3d35XFnZ2eS/3eSA83+7j9XewgA/WrMDQ8d8jFevG1GgZHA4fNec3zYfNRhD6s//elP2bdvXxobG3utb2xszCuvvHLA5yxdujS33XbbX6xvbm7ulzEC0L/q7672CODgvPPOO6mvr3/f7UfEtwIXL16c1tbWyuP9+/fn7bffzoknnphBgwZVcWTldHV1pbm5OW+88caA+3jzaOO9GDi8FwOH92Lg8F5UR09PT955552MHj36A/c77GF10kknZciQIeno6Oi1vqOjI01NTQd8Tm1tbWpra3utGz58eH8Nsarq6ur8oQwQ3ouBw3sxcHgvBg7vxeH3QTNV7zns3wqsqanJlClTsmbNmsq6/fv3Z82aNWlpaTncwwEAKKYqHwW2trZm3rx5Oeuss3LOOefk7rvvzq5du/L3f//31RgOAEARVQmryy+/PG+++WaWLFmS9vb2fOYzn8mqVav+4oL2o0ltbW1uvfXWv/jIk8PPezFweC8GDu/FwOG9GNiqch8rAICPIj/CDABQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhQ6s9gIOxf//+bN26NcOGDcugQYOqPRwA4COup6cn77zzTkaPHp3Bg99/XuqIDKutW7emubm52sMAAI4yb7zxRk4++eT33X5EhtWwYcOS/L+Tq6urq/JoAICPuq6urjQ3N1ca5P0ckWH13sd/dXV1wgoAOGw+7BIkF68DABQirAAAChFWAACFCCsAgEKEFQBAIcIKAKAQYQUAUIiwAgAoRFgBABQirAAAChFWAACFCCsAgEL69CPM999/f+6///68/vrrSZJPf/rTWbJkSWbNmpUkeffdd3PjjTfmwQcfTHd3d2bMmJH77rsvjY2NlWNs2bIlCxYsyG9+85uccMIJmTdvXpYuXZqhQ4/I34OGAeOUmx/r99d4/Y7Z/f4aAEeyPs1YnXzyybnjjjuyYcOGPPvss/nCF76QL33pS3nppZeSJDfccEMeffTRPPTQQ1m7dm22bt2aSy+9tPL8ffv2Zfbs2dm9e3eeeuqp/OQnP8ny5cuzZMmSsmcFAFAFg3p6enoO5QANDQ35/ve/n8suuywjRozIihUrctlllyVJXnnllUyYMCFtbW0599xz86tf/Spf/OIXs3Xr1sos1rJly3LTTTflzTffTE1NzV/1ml1dXamvr09nZ2fq6uoOZfjwkWHGCqD//LXtcdDXWO3bty8PPvhgdu3alZaWlmzYsCF79uzJtGnTKvuMHz8+Y8aMSVtbW5Kkra0tkyZN6vXR4IwZM9LV1VWZ9TqQ7u7udHV19VoAAAaaPofVCy+8kBNOOCG1tbX56le/mocffjgTJ05Me3t7ampqMnz48F77NzY2pr29PUnS3t7eK6re2/7etvezdOnS1NfXV5bm5ua+DhsAoN/1OaxOO+20PPfcc1m/fn0WLFiQefPm5eWXX+6PsVUsXrw4nZ2dleWNN97o19cDADgYff4qXk1NTT7xiU8kSaZMmZJnnnkm//iP/5jLL788u3fvzo4dO3rNWnV0dKSpqSlJ0tTUlN/97ne9jtfR0VHZ9n5qa2tTW1vb16ECABxWh3wfq/3796e7uztTpkzJMccckzVr1lS2bdy4MVu2bElLS0uSpKWlJS+88EK2b99e2Wf16tWpq6vLxIkTD3UoAABV1acZq8WLF2fWrFkZM2ZM3nnnnaxYsSJPPvlkHn/88dTX12f+/PlpbW1NQ0ND6urqct1116WlpSXnnntukmT69OmZOHFirrzyytx5551pb2/PLbfckoULF5qRAgCOeH0Kq+3bt+eqq67Ktm3bUl9fn8mTJ+fxxx/P3/zN3yRJ7rrrrgwePDhz5szpdYPQ9wwZMiQrV67MggUL0tLSkuOPPz7z5s3L7bffXvasAACq4JDvY1UN7mMFf8l9rAD6T7/fxwoAgN6EFQBAIcIKAKCQPt/HCjh6uY4L4IOZsQIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAArpU1gtXbo0Z599doYNG5aRI0fmkksuycaNG3vtc8EFF2TQoEG9lq9+9au99tmyZUtmz56d4447LiNHjszXv/717N2799DPBgCgiob2Zee1a9dm4cKFOfvss7N3795885vfzPTp0/Pyyy/n+OOPr+x3zTXX5Pbbb688Pu644yr/3rdvX2bPnp2mpqY89dRT2bZtW6666qocc8wx+e53v1vglAAAqqNPYbVq1apej5cvX56RI0dmw4YNOf/88yvrjzvuuDQ1NR3wGP/xH/+Rl19+Ob/+9a/T2NiYz3zmM/mHf/iH3HTTTfn2t7+dmpqagzgNAIDqO6RrrDo7O5MkDQ0NvdY/8MADOemkk3L66adn8eLF+fOf/1zZ1tbWlkmTJqWxsbGybsaMGenq6spLL710wNfp7u5OV1dXrwUAYKDp04zVf7V///5cf/31+exnP5vTTz+9sv7v/u7vMnbs2IwePTrPP/98brrppmzcuDH/9m//liRpb2/vFVVJKo/b29sP+FpLly7NbbfddrBDBQA4LA46rBYuXJgXX3wxv/3tb3utv/baayv/njRpUkaNGpULL7wwmzdvzsc//vGDeq3FixentbW18rirqyvNzc0HN3AAgH5yUB8FLlq0KCtXrsxvfvObnHzyyR+479SpU5MkmzZtSpI0NTWlo6Oj1z7vPX6/67Jqa2tTV1fXawEAGGj6FFY9PT1ZtGhRHn744TzxxBMZN27chz7nueeeS5KMGjUqSdLS0pIXXngh27dvr+yzevXq1NXVZeLEiX0ZDgDAgNKnjwIXLlyYFStW5Je//GWGDRtWuSaqvr4+xx57bDZv3pwVK1bkoosuyoknnpjnn38+N9xwQ84///xMnjw5STJ9+vRMnDgxV155Ze688860t7fnlltuycKFC1NbW1v+DAEADpM+zVjdf//96ezszAUXXJBRo0ZVlp///OdJkpqamvz617/O9OnTM378+Nx4442ZM2dOHn300coxhgwZkpUrV2bIkCFpaWnJV77ylVx11VW97nsFAHAk6tOMVU9Pzwdub25uztq1az/0OGPHjs2///u/9+WlAQAGPL8VCABQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKGVrtAcDR4pSbH6v2EADoZ8IKGFD6O0Bfv2N2vx4fOLr5KBAAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhfQqrpUuX5uyzz86wYcMycuTIXHLJJdm4cWOvfd59990sXLgwJ554Yk444YTMmTMnHR0dvfbZsmVLZs+eneOOOy4jR47M17/+9ezdu/fQzwYAoIr6FFZr167NwoUL8/TTT2f16tXZs2dPpk+fnl27dlX2ueGGG/Loo4/moYceytq1a7N169Zceumlle379u3L7Nmzs3v37jz11FP5yU9+kuXLl2fJkiXlzgoAoAoG9fT09Bzsk998882MHDkya9euzfnnn5/Ozs6MGDEiK1asyGWXXZYkeeWVVzJhwoS0tbXl3HPPza9+9at88YtfzNatW9PY2JgkWbZsWW666aa8+eabqamp+dDX7erqSn19fTo7O1NXV3eww4fD6pSbH6v2EEjy+h2zqz0E4Aj017bHIV1j1dnZmSRpaGhIkmzYsCF79uzJtGnTKvuMHz8+Y8aMSVtbW5Kkra0tkyZNqkRVksyYMSNdXV156aWXDvg63d3d6erq6rUAAAw0Bx1W+/fvz/XXX5/PfvazOf3005Mk7e3tqampyfDhw3vt29jYmPb29so+/zWq3tv+3rYDWbp0aerr6ytLc3PzwQ4bAKDfHHRYLVy4MC+++GIefPDBkuM5oMWLF6ezs7OyvPHGG/3+mgAAfTX0YJ60aNGirFy5MuvWrcvJJ59cWd/U1JTdu3dnx44dvWatOjo60tTUVNnnd7/7Xa/jvfetwff2+e9qa2tTW1t7MEMFADhs+jRj1dPTk0WLFuXhhx/OE088kXHjxvXaPmXKlBxzzDFZs2ZNZd3GjRuzZcuWtLS0JElaWlrywgsvZPv27ZV9Vq9enbq6ukycOPFQzgUAoKr6NGO1cOHCrFixIr/85S8zbNiwyjVR9fX1OfbYY1NfX5/58+entbU1DQ0Nqaury3XXXZeWlpace+65SZLp06dn4sSJufLKK3PnnXemvb09t9xySxYuXGhWCgA4ovUprO6///4kyQUXXNBr/Y9//ONcffXVSZK77rorgwcPzpw5c9Ld3Z0ZM2bkvvvuq+w7ZMiQrFy5MgsWLEhLS0uOP/74zJs3L7fffvuhnQkAQJUd0n2sqsV9rDgSuY/VwOA+VsDBOCz3sQIA4P8TVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCFDqz0AgMPplJsf6/fXeP2O2f3+GsDAZMYKAKAQYQUAUIiwAgAoRFgBABTi4nXI4bmgGYCPPjNWAACFCCsAgEKEFQBAIcIKAKAQYQUAUIiwAgAoRFgBABQirAAAChFWAACFCCsAgEKEFQBAIcIKAKCQPofVunXrcvHFF2f06NEZNGhQHnnkkV7br7766gwaNKjXMnPmzF77vP3225k7d27q6uoyfPjwzJ8/Pzt37jykEwEAqLY+h9WuXbtyxhln5N57733ffWbOnJlt27ZVlp/97Ge9ts+dOzcvvfRSVq9enZUrV2bdunW59tpr+z56AIABZGhfnzBr1qzMmjXrA/epra1NU1PTAbf94Q9/yKpVq/LMM8/krLPOSpLcc889ueiii/KDH/wgo0eP7uuQAAAGhH65xurJJ5/MyJEjc9ppp2XBggV56623Ktva2toyfPjwSlQlybRp0zJ48OCsX7/+gMfr7u5OV1dXrwUAYKApHlYzZ87MT3/606xZsybf+973snbt2syaNSv79u1LkrS3t2fkyJG9njN06NA0NDSkvb39gMdcunRp6uvrK0tzc3PpYQMAHLI+fxT4Ya644orKvydNmpTJkyfn4x//eJ588slceOGFB3XMxYsXp7W1tfK4q6tLXAEAA06/327h1FNPzUknnZRNmzYlSZqamrJ9+/Ze++zduzdvv/32+16XVVtbm7q6ul4LAMBA0+9h9cc//jFvvfVWRo0alSRpaWnJjh07smHDhso+TzzxRPbv35+pU6f293AAAPpNnz8K3LlzZ2X2KUlee+21PPfcc2loaEhDQ0Nuu+22zJkzJ01NTdm8eXO+8Y1v5BOf+ERmzJiRJJkwYUJmzpyZa665JsuWLcuePXuyaNGiXHHFFb4RCAAc0fo8Y/Xss8/mzDPPzJlnnpkkaW1tzZlnnpklS5ZkyJAhef755/O3f/u3+dSnPpX58+dnypQp+c///M/U1tZWjvHAAw9k/PjxufDCC3PRRRflvPPOyz//8z+XOysAgCro84zVBRdckJ6envfd/vjjj3/oMRoaGrJixYq+vjQAwIDmtwIBAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChlZ7APBhTrn5sWoPAQD+KmasAAAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhBQBQiLACACjEfawAjkD9fX+31++Y3a/Hh48qM1YAAIWYsQIozK8FwNHLjBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCF9Dqt169bl4osvzujRozNo0KA88sgjvbb39PRkyZIlGTVqVI499thMmzYtr776aq993n777cydOzd1dXUZPnx45s+fn507dx7SiQAAVFufw2rXrl0544wzcu+99x5w+5133pkf/ehHWbZsWdavX5/jjz8+M2bMyLvvvlvZZ+7cuXnppZeyevXqrFy5MuvWrcu111578GcBADAA9Pm3AmfNmpVZs2YdcFtPT0/uvvvu3HLLLfnSl76UJPnpT3+axsbGPPLII7niiivyhz/8IatWrcozzzyTs846K0lyzz335KKLLsoPfvCDjB49+hBOBwCgeopeY/Xaa6+lvb0906ZNq6yrr6/P1KlT09bWliRpa2vL8OHDK1GVJNOmTcvgwYOzfv36Ax63u7s7XV1dvRYAgIGmaFi1t7cnSRobG3utb2xsrGxrb2/PyJEje20fOnRoGhoaKvv8d0uXLk19fX1laW5uLjlsAIAijohvBS5evDidnZ2V5Y033qj2kAAA/kLRsGpqakqSdHR09Frf0dFR2dbU1JTt27f32r537968/fbblX3+u9ra2tTV1fVaAAAGmqJhNW7cuDQ1NWXNmjWVdV1dXVm/fn1aWlqSJC0tLdmxY0c2bNhQ2eeJJ57I/v37M3Xq1JLDAQA4rPr8rcCdO3dm06ZNlcevvfZannvuuTQ0NGTMmDG5/vrr853vfCef/OQnM27cuHzrW9/K6NGjc8kllyRJJkyYkJkzZ+aaa67JsmXLsmfPnixatChXXHGFbwQCAEe0PofVs88+m89//vOVx62trUmSefPmZfny5fnGN76RXbt25dprr82OHTty3nnnZdWqVfnYxz5Wec4DDzyQRYsW5cILL8zgwYMzZ86c/OhHPypwOgAA1TOop6enp9qD6Kuurq7U19ens7PT9VZHgVNufqzaQ4Cjzut3zK72EGBA+Wvb44j4ViAAwJFAWAEAFCKsAAAKEVYAAIUIKwCAQoQVAEAhwgoAoJA+3yAUgI++w3H/OPfK4qPIjBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKGRotQfAke+Umx+r9hAAYEAwYwUAUEjxsPr2t7+dQYMG9VrGjx9f2f7uu+9m4cKFOfHEE3PCCSdkzpw56ejoKD0MAIDDrl9mrD796U9n27ZtleW3v/1tZdsNN9yQRx99NA899FDWrl2brVu35tJLL+2PYQAAHFb9co3V0KFD09TU9BfrOzs78y//8i9ZsWJFvvCFLyRJfvzjH2fChAl5+umnc+655/bHcAAADot+mbF69dVXM3r06Jx66qmZO3dutmzZkiTZsGFD9uzZk2nTplX2HT9+fMaMGZO2trb3PV53d3e6urp6LQAAA03xsJo6dWqWL1+eVatW5f77789rr72Wz33uc3nnnXfS3t6empqaDB8+vNdzGhsb097e/r7HXLp0aerr6ytLc3Nz6WEDAByy4h8Fzpo1q/LvyZMnZ+rUqRk7dmx+8Ytf5Nhjjz2oYy5evDitra2Vx11dXeIKABhw+v12C8OHD8+nPvWpbNq0KU1NTdm9e3d27NjRa5+Ojo4DXpP1ntra2tTV1fVaAAAGmn4Pq507d2bz5s0ZNWpUpkyZkmOOOSZr1qypbN+4cWO2bNmSlpaW/h4KAEC/Kv5R4Ne+9rVcfPHFGTt2bLZu3Zpbb701Q4YMyZe//OXU19dn/vz5aW1tTUNDQ+rq6nLdddelpaXFNwIBgCNe8bD64x//mC9/+ct56623MmLEiJx33nl5+umnM2LEiCTJXXfdlcGDB2fOnDnp7u7OjBkzct9995UeBgDAYTeop6enp9qD6Kuurq7U19ens7PT9VYDgN8KBA7G63fMrvYQ4K/217aH3woEAChEWAEAFNIvP2kDAB/mcFxG4ONGDjczVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKMTtFgD4yOrvWzq4nQP/nRkrAIBChBUAQCHCCgCgEGEFAFCIsAIAKERYAQAUIqwAAAoRVgAAhQgrAIBChBUAQCHCCgCgEGEFAFCIsAIAKGRotQdA/+rvX3YHAP4/M1YAAIUIKwCAQoQVAEAhrrECgIN0OK5jff2O2f3+GpRjxgoAoBBhBQBQiLACAChEWAEAFCKsAAAKEVYAAIUIKwCAQtzHqor8jh8AfLSYsQIAKMSMFQAMYO7ufmSpWljde++9+f73v5/29vacccYZueeee3LOOedUazgH5KM6AKAvqvJR4M9//vO0trbm1ltvze9///ucccYZmTFjRrZv316N4QAAFFGVGasf/vCHueaaa/L3f//3SZJly5blsccey7/+67/m5ptvrsaQAIB+cjR9nHnYw2r37t3ZsGFDFi9eXFk3ePDgTJs2LW1tbQd8Tnd3d7q7uyuPOzs7kyRdXV39Otb93X/u1+MDwEDwUfj/p/19Du8dv6en5wP3O+xh9ac//Sn79u1LY2Njr/WNjY155ZVXDvicpUuX5rbbbvuL9c3Nzf0yRgA4mtTfXe0RHLrDdQ7vvPNO6uvr33f7EfGtwMWLF6e1tbXyeP/+/Xn77bdz4oknZtCgQVUcWTldXV1pbm7OG2+8kbq6umoP56jmvRg4vBcDh/di4PBeVEdPT0/eeeedjB49+gP3O+xhddJJJ2XIkCHp6Ojotb6joyNNTU0HfE5tbW1qa2t7rRs+fHh/DbGq6urq/KEMEN6LgcN7MXB4LwYO78Xh90EzVe857N8KrKmpyZQpU7JmzZrKuv3792fNmjVpaWk53MMBACimKh8Ftra2Zt68eTnrrLNyzjnn5O67786uXbsq3xIEADgSVSWsLr/88rz55ptZsmRJ2tvb85nPfCarVq36iwvajya1tbW59dZb/+IjTw4/78XA4b0YOLwXA4f3YmAb1PNh3xsEAOCv4keYAQAKEVYAAIUIKwCAQoQVAEAhwgoAoBBhNUCdcsopGTRoUK/ljjvuqPawjgr33ntvTjnllHzsYx/L1KlT87vf/a7aQzrqfPvb3/6L//7Hjx9f7WEdFdatW5eLL744o0ePzqBBg/LII4/02t7T05MlS5Zk1KhROfbYYzNt2rS8+uqr1RnsR9yHvRdXX331X/ydzJw5szqDpUJYDWC33357tm3bVlmuu+66ag/pI+/nP/95Wltbc+utt+b3v/99zjjjjMyYMSPbt2+v9tCOOp/+9Kd7/ff/29/+ttpDOirs2rUrZ5xxRu69994Dbr/zzjvzox/9KMuWLcv69etz/PHHZ8aMGXn33XcP80g/+j7svUiSmTNn9vo7+dnPfnYYR8iBHBE/wny0GjZs2Pv+fiL944c//GGuueaayq8ALFu2LI899lj+9V//NTfffHOVR3d0GTp0qP/+q2DWrFmZNWvWAbf19PTk7rvvzi233JIvfelLSZKf/vSnaWxszCOPPJIrrrjicA71I++D3ov31NbW+jsZYMxYDWB33HFHTjzxxJx55pn5/ve/n71791Z7SB9pu3fvzoYNGzJt2rTKusGDB2fatGlpa2ur4siOTq+++mpGjx6dU089NXPnzs2WLVuqPaSj3muvvZb29vZefyP19fWZOnWqv5EqefLJJzNy5MicdtppWbBgQd56661qD+moZ8ZqgPo//+f/5H/9r/+VhoaGPPXUU1m8eHG2bduWH/7wh9Ue2kfWn/70p+zbt+8vflqpsbExr7zySpVGdXSaOnVqli9fntNOOy3btm3Lbbfdls997nN58cUXM2zYsGoP76jV3t6eJAf8G3lvG4fPzJkzc+mll2bcuHHZvHlzvvnNb2bWrFlpa2vLkCFDqj28o5awOoxuvvnmfO973/vAff7whz9k/PjxaW1traybPHlyampq8r//9//O0qVL/T4UH3n/9eOPyZMnZ+rUqRk7dmx+8YtfZP78+VUcGQwc//Wj10mTJmXy5Mn5+Mc/nieffDIXXnhhFUd2dBNWh9GNN96Yq6+++gP3OfXUUw+4furUqdm7d29ef/31nHbaaf0wOk466aQMGTIkHR0dvdZ3dHS4hqHKhg8fnk996lPZtGlTtYdyVHvv76CjoyOjRo2qrO/o6MhnPvOZKo2K95x66qk56aSTsmnTJmFVRcLqMBoxYkRGjBhxUM997rnnMnjw4IwcObLwqHhPTU1NpkyZkjVr1uSSSy5Jkuzfvz9r1qzJokWLqju4o9zOnTuzefPmXHnlldUeylFt3LhxaWpqypo1ayoh1dXVlfXr12fBggXVHRz54x//mLfeeqtX9HL4CasBqK2tLevXr8/nP//5DBs2LG1tbbnhhhvyla98Jf/jf/yPag/vI621tTXz5s3LWWedlXPOOSd33313du3aVfmWIIfH1772tVx88cUZO3Zstm7dmltvvTVDhgzJl7/85WoP7SNv586dvWYGX3vttTz33HNpaGjImDFjcv311+c73/lOPvnJT2bcuHH51re+ldGjR1f+xwjlfNB70dDQkNtuuy1z5sxJU1NTNm/enG984xv5xCc+kRkzZlRx1KSHAWfDhg09U6dO7amvr+/52Mc+1jNhwoSe7373uz3vvvtutYd2VLjnnnt6xowZ01NTU9Nzzjnn9Dz99NPVHtJR5/LLL+8ZNWpUT01NTc///J//s+fyyy/v2bRpU7WHdVT4zW9+05PkL5Z58+b19PT09Ozfv7/nW9/6Vk9jY2NPbW1tz4UXXtizcePG6g76I+qD3os///nPPdOnT+8ZMWJEzzHHHNMzduzYnmuuuaanvb292sM+6g3q6enpqVbUAQB8lLiPFQBAIcIKAKAQYQUAUIiwAgAoRFgBABQirAAAChFWAACFCCsAgEKEFQBAIcIKAKAQYQUAUMj/BZuv5gFML/PzAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 700x900 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2, 1, figsize=(7, 9), sharex=True)\n",
    "\n",
    "y1_grs = p1.posterior[\"Y_mean\"].sel(Y_obs=0).to_numpy().flatten()\n",
    "y2_grs = p1.posterior[\"Y_mean\"].sel(Y_obs=1).to_numpy().flatten()\n",
    "\n",
    "axes[0].hist(y1_grs, bins=20);\n",
    "axes[1].hist(y2_grs, bins=20);"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Only 200 samples in chain.\n",
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Multiprocess sampling (2 chains in 2 jobs)\n",
      "NUTS: [Intercept, period, treat, 1|subject_sigma, 1|subject_offset, treat|subject_sigma, treat|subject_offset]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<style>\n",
       "    /* Turns off some styling */\n",
       "    progress {\n",
       "        /* gets rid of default border in Firefox and Opera. */\n",
       "        border: none;\n",
       "        /* Needs to be in here for Safari polyfill so background images work as expected. */\n",
       "        background-size: auto;\n",
       "    }\n",
       "    progress:not([value]), progress:not([value])::-webkit-progress-bar {\n",
       "        background: repeating-linear-gradient(45deg, #7e7e7e, #7e7e7e 10px, #5c5c5c 10px, #5c5c5c 20px);\n",
       "    }\n",
       "    .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n",
       "        background: #F44336;\n",
       "    }\n",
       "</style>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      <progress value='800' class='' max='800' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      100.00% [800/800 00:11&lt;00:00 Sampling 2 chains, 1 divergences]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Sampling 2 chains for 200 tune and 200 draw iterations (400 + 400 draws total) took 12 seconds.\n",
      "We recommend running at least 4 chains for robust computation of convergence diagnostics\n"
     ]
    }
   ],
   "source": [
    "inhaler = pd.read_csv(\"../../tests/data/inhaler.csv\")\n",
    "inhaler[\"rating\"] = pd.Categorical(inhaler[\"rating\"], categories=[1, 2, 3, 4])\n",
    "inhaler[\"treat\"] = pd.Categorical(inhaler[\"treat\"])\n",
    "\n",
    "model = bmb.Model(\n",
    "    \"rating ~ 1 + period + treat + (1 + treat|subject)\", inhaler, family=\"categorical\"\n",
    ")\n",
    "idata = model.fit(tune=200, draws=200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>subject</th>\n",
       "      <th>rating</th>\n",
       "      <th>treat</th>\n",
       "      <th>period</th>\n",
       "      <th>carry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>999</td>\n",
       "      <td>1</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   subject rating treat  period  carry\n",
       "0        1      1   0.5     0.5      0\n",
       "1      999      1   0.5     0.5      0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new = inhaler.head(2).reset_index(drop=True)\n",
    "df_new[\"subject\"] = [1, 999]\n",
    "df_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "p = model.predict(idata, data=df_new, inplace=False, sample_new_groups=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x900 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(2, 2, figsize=(12, 9))\n",
    "bins = np.linspace(0, 1, 20)\n",
    "\n",
    "for i, ax in enumerate(axes.ravel()):\n",
    "    x = p.posterior[\"rating_mean\"].sel({\"rating_dim\": f'{i + 1}'}).to_numpy()\n",
    "    ax.hist(x[..., 0].flatten(), bins=bins, histtype=\"step\", color=\"C0\")\n",
    "    ax.hist(x[..., 1].flatten(), bins=bins, histtype=\"step\", color=\"C1\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "bambi",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
